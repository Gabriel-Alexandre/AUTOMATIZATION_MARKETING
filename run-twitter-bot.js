const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
// Carregar variáveis de ambiente do arquivo .env
require('dotenv').config();

// Cores para o console
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// Função auxiliar para logs coloridos
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// Verifica configurações de ambiente
function checkEnvironment() {
  let missing = [];
  
  // Verifica variáveis de ambiente críticas
  if (!process.env.TWITTER_USERNAME) missing.push('TWITTER_USERNAME');
  if (!process.env.TWITTER_PASSWORD) missing.push('TWITTER_PASSWORD');
  if (!process.env.OPENROUTER_API_KEY) missing.push('OPENROUTER_API_KEY');
  
  if (missing.length > 0) {
    log(`⚠️ Faltam as seguintes variáveis de ambiente: ${missing.join(', ')}`, colors.yellow);
    log('Por favor, crie um arquivo .env com estas variáveis antes de executar.', colors.yellow);
    
    // Verificar se o arquivo .env existe
    if (!fs.existsSync(path.join(__dirname, '.env'))) {
      const envExample = [
        'TWITTER_USERNAME=seu_usuario_twitter',
        'TWITTER_PASSWORD=sua_senha_twitter',
        'OPENROUTER_API_KEY=sua_chave_openrouter'
      ].join('\n');
      
      log('\nAqui está um exemplo de conteúdo para seu arquivo .env:', colors.cyan);
      log(envExample, colors.reset);
    }
    
    return false;
  }
  
  return true;
}

// Parâmetros de configuração
const config = {
  proxyPath: path.join(__dirname, 'proxy.js'),
  testCommand: process.platform === 'win32' ? path.join(process.cwd(), 'node_modules', '.bin', 'playwright.cmd') : './node_modules/.bin/playwright',
  testArgs: ['test', 'tests/twitter-post.spec.js', '--headed'],
  // Tempo para aguardar o proxy iniciar em milissegundos
  proxyStartupDelay: 2000,
  // Tempo máximo para aguardar o teste finalizar em milissegundos
  testTimeout: 5 * 60 * 1000 // 5 minutos
};

// Função principal
async function main() {
  log('🤖 Iniciando o bot de automação do Twitter', colors.magenta);
  
  // Verificar ambiente
  if (!checkEnvironment()) {
    process.exit(1);
  }
  
  // Verifica se o servidor proxy já está rodando
  const proxyCheck = spawn('curl', ['http://localhost:8000/proxy-status'], { stdio: 'pipe' });
  
  let proxyAlreadyRunning = false;
  let proxyProcess = null;
  
  proxyCheck.on('close', async (code) => {
    if (code === 0) {
      log('Proxy já está rodando em localhost:8000, reutilizando...', colors.green);
      proxyAlreadyRunning = true;
      await runTest();
    } else {
      // Iniciar o proxy
      log('Iniciando o servidor proxy...', colors.cyan);
      proxyProcess = spawn('node', [config.proxyPath], { stdio: 'pipe' });
      
      log('Aguardando o proxy iniciar...', colors.yellow);
      
      // Capturar saída do proxy
      proxyProcess.stdout.on('data', async (data) => {
        const output = data.toString().trim();
        log(`[Proxy] ${output}`, colors.blue);
        
        // Detectar quando o proxy está pronto
        if (output.includes('Proxy rodando na porta 8000')) {
          log('Proxy iniciado com sucesso!', colors.green);
          
          // Aguardar mais um pouco para garantir que o proxy está totalmente pronto
          setTimeout(async () => {
            await runTest();
          }, config.proxyStartupDelay);
        }
      });
      
      proxyProcess.stderr.on('data', (data) => {
        log(`[Proxy Error] ${data.toString().trim()}`, colors.red);
      });
      
      // Verificar se o proxy encerrou de forma inesperada
      proxyProcess.on('close', (code) => {
        if (code !== 0 && code !== null) {
          log(`Servidor proxy encerrou com código de saída ${code}`, colors.red);
        }
      });
    }
  });
  
  // Função para executar o teste
  async function runTest() {
    log('\n============================================', colors.magenta);
    log('Iniciando o bot de postagem no Twitter...', colors.magenta);
    log('============================================\n', colors.magenta);
    
    let testProcess;
    
    try {
      // Verifique se o arquivo de teste existe
      const testFilePath = path.join(__dirname, 'tests', 'twitter-post.spec.js');
      if (!fs.existsSync(testFilePath)) {
        log(`\n❌ Arquivo de teste não encontrado: ${testFilePath}`, colors.red);
        return;
      }
      
      // No Windows, execute usando o módulo node
      if (process.platform === 'win32') {
        testProcess = spawn('npx.cmd', ['playwright', 'test', testFilePath, '--headed', '-g', "Post a tweet generated by Claude 3.5"], { 
          stdio: 'inherit',
          shell: true // Use shell no Windows
        });
      } else {
        testProcess = spawn(config.testCommand, [...config.testArgs, '-g', "Post a tweet generated by Claude 3.5"], { stdio: 'inherit' });
      }
      
      // Definir timeout para o teste
      const testTimeoutId = setTimeout(() => {
        log('\nTempo limite excedido! Encerrando o teste...', colors.red);
        testProcess.kill('SIGINT');
      }, config.testTimeout);
      
      testProcess.on('close', (code) => {
        clearTimeout(testTimeoutId);
        
        if (code === 0) {
          log('\n✅ Teste do Twitter concluído com sucesso!', colors.green);
        } else {
          log(`\n❌ Teste do Twitter falhou com código de saída ${code}`, colors.red);
        }
        
        // Encerrar o proxy se nós o iniciamos
        if (proxyProcess && !proxyAlreadyRunning) {
          log('\nEncerrando o servidor proxy...', colors.cyan);
          proxyProcess.kill('SIGINT');
        } else if (proxyAlreadyRunning) {
          log('\nProxy externo mantido em execução.', colors.cyan);
        }
        
        process.exit(code);
      });
    } catch (error) {
      log(`\n❌ Erro ao iniciar o teste: ${error.message}`, colors.red);
      
      // Encerrar o proxy se nós o iniciamos
      if (proxyProcess && !proxyAlreadyRunning) {
        log('\nEncerrando o servidor proxy...', colors.cyan);
        proxyProcess.kill('SIGINT');
      }
      
      process.exit(1);
    }
  }
}

// Lidar com encerramento do processo principal
process.on('SIGINT', () => {
  log('\nEncerrando processos...', colors.yellow);
  process.exit(0);
});

// Iniciar o script
main().catch(error => {
  log(`Erro ao executar o script: ${error.message}`, colors.red);
  process.exit(1);
}); 