const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Caminho para o arquivo que armazenarÃ¡ as informaÃ§Ãµes das Ãºltimas notÃ­cias
// Garantindo que o arquivo seja salvo na raiz do projeto AUTOMATIZATION_MARKETING
const lastNewsFilePath = path.join(process.cwd(), 'last-news.json');

// Log do caminho completo para depuraÃ§Ã£o
console.log(`Caminho do arquivo de cache de notÃ­cias: ${lastNewsFilePath}`);

// FunÃ§Ã£o para garantir que o diretÃ³rio existe
function ensureDirectoryExists(filePath) {
  const dirname = path.dirname(filePath);
  if (fs.existsSync(dirname)) {
    return true;
  }
  
  ensureDirectoryExists(dirname);
  fs.mkdirSync(dirname, { recursive: true });
  return true;
}

// FunÃ§Ã£o para salvar dados das Ãºltimas notÃ­cias usadas
async function saveLastNewsData(article) {
  try {
    const newsData = {
      title: article.title,
      url: article.url,
      publishedAt: article.publishedAt,
      timestamp: new Date().toISOString()
    };
    
    // Garantir que o diretÃ³rio exista
    ensureDirectoryExists(lastNewsFilePath);
    
    // Obter histÃ³rico existente ou criar um novo array vazio
    let newsHistory = [];
    if (fs.existsSync(lastNewsFilePath)) {
      try {
        const data = fs.readFileSync(lastNewsFilePath, 'utf8');
        newsHistory = JSON.parse(data);
        
        // Garantir que newsHistory Ã© um array
        if (!Array.isArray(newsHistory)) {
          console.log('Arquivo de histÃ³rico existe mas nÃ£o Ã© um array, criando novo array');
          newsHistory = [];
        }
      } catch (parseError) {
        console.error(`Erro ao ler arquivo de histÃ³rico: ${parseError.message}`);
        newsHistory = [];
      }
    }
    
    // Adicionar a nova notÃ­cia no inÃ­cio do array
    newsHistory.unshift(newsData);
    
    // Manter apenas as Ãºltimas 14 notÃ­cias
    if (newsHistory.length > 14) {
      newsHistory = newsHistory.slice(0, 14);
    }
    
    // Usar fs.writeFileSync para escrita sÃ­ncrona, facilitando debug
    console.log(`Tentando salvar histÃ³rico de notÃ­cias no arquivo: ${lastNewsFilePath}`);
    console.log(`Total de notÃ­cias no histÃ³rico: ${newsHistory.length}`);
    fs.writeFileSync(lastNewsFilePath, JSON.stringify(newsHistory, null, 2), 'utf8');
    console.log('Dados das notÃ­cias salvos com sucesso para referÃªncia futura');
    
    // Verificar se o arquivo foi realmente criado
    if (fs.existsSync(lastNewsFilePath)) {
      console.log(`Arquivo verificado e existe em: ${lastNewsFilePath}`);
    } else {
      console.error(`ERRO: Arquivo nÃ£o foi criado em: ${lastNewsFilePath}`);
    }
  } catch (error) {
    console.error(`Erro ao salvar dados das Ãºltimas notÃ­cias: ${error.message}`);
    console.error(`Stack trace: ${error.stack}`);
  }
}

// FunÃ§Ã£o para obter dados das Ãºltimas notÃ­cias
async function getLastNewsData() {
  try {
    if (fs.existsSync(lastNewsFilePath)) {
      console.log(`Lendo arquivo de histÃ³rico de notÃ­cias: ${lastNewsFilePath}`);
      const data = fs.readFileSync(lastNewsFilePath, 'utf8');
      const newsHistory = JSON.parse(data);
      
      // Verificar se o histÃ³rico Ã© um array e nÃ£o estÃ¡ vazio
      if (Array.isArray(newsHistory) && newsHistory.length > 0) {
        console.log(`HistÃ³rico contÃ©m ${newsHistory.length} notÃ­cias anteriores`);
        return newsHistory;
      }
      console.log('Arquivo de histÃ³rico existe mas estÃ¡ vazio ou nÃ£o Ã© vÃ¡lido');
    } else {
      console.log(`Arquivo de notÃ­cias anterior nÃ£o encontrado em: ${lastNewsFilePath}`);
    }
    return [];
  } catch (error) {
    console.error(`Erro ao ler dados das Ãºltimas notÃ­cias: ${error.message}`);
    console.error(`Stack trace: ${error.stack}`);
    return [];
  }
}

// Function to fetch AI news from the web
async function fetchAINews() {
  try {
    console.log('Buscando notÃ­cias sobre IA na internet...');
    
    const response = await axios.get('https://newsapi.org/v2/everything', {
      params: {
        q: 'artificial intelligence',
        language: 'en',
        sortBy: 'publishedAt',
        pageSize: 5
      },
      headers: {
        'X-Api-Key': process.env.NEWS_API_KEY
      }
    });
    
    if (response.data && response.data.articles && response.data.articles.length > 0) {
      // Obter dados das Ãºltimas notÃ­cias usadas
      const lastNewsHistory = await getLastNewsData();
      
      // Lista de artigos
      const articles = response.data.articles;
      
      // Selecionar um artigo diferente do Ãºltimo usado
      let selectedArticle = articles[0]; // PadrÃ£o: primeiro artigo
      
      if (Array.isArray(lastNewsHistory) && lastNewsHistory.length > 0) {
        console.log('Verificando se a notÃ­cia Ã© diferente das anteriores...');
        
        // Lista dos tÃ­tulos usados anteriormente
        const previousTitles = lastNewsHistory.map(item => item.title);
        
        // Procurar um artigo com tÃ­tulo que nÃ£o estÃ¡ no histÃ³rico
        const differentArticle = articles.find(article => 
          !previousTitles.includes(article.title)
        );
        
        if (differentArticle) {
          console.log('Encontrada notÃ­cia diferente das anteriores');
          selectedArticle = differentArticle;
        } else {
          console.log('NÃ£o foi possÃ­vel encontrar uma notÃ­cia diferente entre as 5 primeiras');
          // Se nÃ£o encontrar uma diferente, tenta buscar mais notÃ­cias
          try {
            const moreResponse = await axios.get('https://newsapi.org/v2/everything', {
              params: {
                q: 'artificial intelligence',
                language: 'en',
                sortBy: 'publishedAt',
                pageSize: 10,
                page: 2  // Buscando segunda pÃ¡gina de resultados
              },
              headers: {
                'X-Api-Key': process.env.NEWS_API_KEY
              }
            });
            
            if (moreResponse.data && moreResponse.data.articles && moreResponse.data.articles.length > 0) {
              // Procurar entre os artigos da segunda pÃ¡gina
              const differentArticleFromPage2 = moreResponse.data.articles.find(article => 
                !previousTitles.includes(article.title)
              );
              
              if (differentArticleFromPage2) {
                selectedArticle = differentArticleFromPage2;
                console.log('Usando notÃ­cia diferente da segunda pÃ¡gina de resultados');
              } else {
                console.log('NÃ£o foi possÃ­vel encontrar notÃ­cia diferente mesmo na segunda pÃ¡gina');
              }
            }
          } catch (error) {
            console.error('Erro ao buscar mais notÃ­cias:', error.message);
          }
        }
      }
      
      // Salvar dados do artigo selecionado para referÃªncia futura
      await saveLastNewsData(selectedArticle);
      
      // Format the content
      const content = `
${selectedArticle.title}

${selectedArticle.description}

${selectedArticle.content}

Source: ${selectedArticle.source.name}
URL: ${selectedArticle.url}
`;
      
      console.log('NotÃ­cia encontrada com sucesso');
      return content;
    } else {
      throw new Error('Nenhuma notÃ­cia encontrada');
    }
  } catch (error) {
    console.error('Erro ao buscar notÃ­cias de IA:', error.message);
    // Return fallback content if fetch fails
    return `
Artificial Intelligence continues to transform industries with breakthrough innovations.

Recent developments in AI models have shown significant improvements in language understanding,
vision processing, and decision-making capabilities.

Researchers are focusing on making AI systems more transparent, ethical, and aligned with human values.

This technology is expected to drive major changes across healthcare, education, transportation,
and many other sectors in the coming years.
`;
  }
}

// Function to generate tweet text
async function generateTweetText() {
  try {
    console.log('Gerando texto do tweet...');
    
    // Fetch AI news to use as content
    const newsContent = await fetchAINews();
    
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'anthropic/claude-3.7-sonnet',
        messages: [
          {
            role: 'user',
            content: 'Generate an attention-grabbing tweet in English for marketing purposes. Use emojis strategically. Must be under 280 characters and compelling. Make it stand out. follow the content: ' + newsContent
          }
        ],
        max_tokens: 280
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    // Extract the generated text
    const generatedText = response.data.choices[0].message.content.trim();
    console.log('Texto gerado com sucesso');
    
    // Ensure it's under 200 characters
    return generatedText.length > 200 ? generatedText.substring(0, 197) + '...' : generatedText;
  } catch (error) {
    console.error('Erro ao gerar texto do tweet:', error.message);
    return 'ðŸš€ Exciting news coming soon! Stay tuned for updates. #Innovation #ComingSoon ðŸ”¥';
  }
}

generateTweetText().then(console.log);