const { test, expect } = require('@playwright/test');
const axios = require('axios');
require('dotenv').config();

// Function to fetch AI news from the web
async function fetchAINews() {
  try {
    console.log('Buscando not√≠cias sobre IA na internet...');
    
    const response = await axios.get('https://newsapi.org/v2/everything', {
      params: {
        q: 'artificial intelligence',
        language: 'en',
        sortBy: 'publishedAt',
        pageSize: 5
      },
      headers: {
        'X-Api-Key': process.env.NEWS_API_KEY
      }
    });
    
    if (response.data && response.data.articles && response.data.articles.length > 0) {
      // Select the first article
      const article = response.data.articles[0];
      
      // Format the content
      const content = `
${article.title}

${article.description}

${article.content}

Source: ${article.source.name}
URL: ${article.url}
`;
      
      console.log('Not√≠cia encontrada com sucesso');
      return content;
    } else {
      throw new Error('Nenhuma not√≠cia encontrada');
    }
  } catch (error) {
    console.error('Erro ao buscar not√≠cias de IA:', error.message);
    // Return fallback content if fetch fails
    return `
Artificial Intelligence continues to transform industries with breakthrough innovations.

Recent developments in AI models have shown significant improvements in language understanding,
vision processing, and decision-making capabilities.

Researchers are focusing on making AI systems more transparent, ethical, and aligned with human values.

This technology is expected to drive major changes across healthcare, education, transportation,
and many other sectors in the coming years.
`;
  }
}

// Function to generate tweet text
async function generateTweetText() {
  try {
    console.log('Gerando texto do tweet...');
    
    // Fetch AI news to use as content
    const newsContent = await fetchAINews();
    
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'anthropic/claude-3.7-sonnet',
        messages: [
          {
            role: 'user',
            content: 'Generate an attention-grabbing tweet in English for marketing purposes. Use emojis strategically. Must be under 280 characters and compelling. Make it stand out. follow the content: ' + newsContent
          }
        ],
        max_tokens: 280
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    // Extract the generated text
    const generatedText = response.data.choices[0].message.content.trim();
    console.log('Texto gerado com sucesso');
    
    // Ensure it's under 200 characters
    return generatedText.length > 200 ? generatedText.substring(0, 197) + '...' : generatedText;
  } catch (error) {
    console.error('Erro ao gerar texto do tweet:', error.message);
    return 'üöÄ Exciting news coming soon! Stay tuned for updates. #Innovation #ComingSoon üî•';
  }
}

test('Post a tweet generated by Claude 3.7', async ({ page, context }) => {
  // Configura√ß√µes adicionais para evitar detec√ß√£o de automa√ß√£o
  await context.addInitScript(() => {
    // Esconder sinais de automa√ß√£o
    Object.defineProperty(navigator, 'webdriver', { get: () => false });
  });
  
  try {
  // Generate tweet text
  const tweetText = await generateTweetText();
    console.log('Texto gerado para o tweet:', tweetText);

    // Acessa o Twitter
    console.log('Acessando o Twitter...');
    
    await page.goto('https://twitter.com/i/flow/login', {
      timeout: 60000,
      waitUntil: 'domcontentloaded'
    });
    
    console.log('Verificando se p√°gina de login carregou...');
    await page.waitForLoadState('networkidle', { timeout: 30000 }).catch(() => {
      console.log('Timeout na espera de networkidle, continuando mesmo assim');
    });
    
    // Verifica√ß√£o adicional para garantir que estamos na p√°gina correta
    const pageTitle = await page.title();
    console.log(`T√≠tulo da p√°gina atual: ${pageTitle}`);
    
    // Capturar screenshot para verificar estado da p√°gina
    await page.screenshot({ path: './img-twitter-execution/login-page.png' }).catch(e => console.error('Erro ao capturar screenshot:', e.message));
    console.log('Screenshot salvo em login-page.png');
    
    // Aguarda para garantir que a p√°gina est√° completamente carregada
    await page.waitForTimeout(5000);
    
    // Verifica se estamos realmente na p√°gina de login antes de continuar
    const isLoginForm = await page.isVisible('input[autocomplete="username"], input[type="text"]', { timeout: 10000 })
      .catch(() => false);
      
    if (!isLoginForm) {
      console.log('P√°gina de login n√£o detectada corretamente. Tentando acessar novamente...');
      // Tenta acessar a p√°gina de login diretamente novamente
      await page.goto('https://twitter.com/i/flow/login?redirect_after_login=%2F', {
        timeout: 60000,
        waitUntil: 'networkidle'
      });
      
      await page.waitForTimeout(5000);
      await page.screenshot({ path: 'login-page-retry.png' });
    }
    
    // Preenche nome de usu√°rio/email
    console.log('Preenchendo credenciais...');
    
    // Verifica novamente se o campo de usu√°rio est√° vis√≠vel
    const usernameVisible = await page.isVisible('input[autocomplete="username"], input[type="text"]', { timeout: 10000 })
      .catch(() => false);
      
    if (!usernameVisible) {
      console.error('Campo de usu√°rio n√£o encontrado mesmo ap√≥s tentativas!');
      await page.screenshot({ path: './img-twitter-execution/login-form-not-found.png' });
      throw new Error('N√£o foi poss√≠vel encontrar o formul√°rio de login');
    }
    
    // Preenchimento com foco expl√≠cito no campo - Usamos o EMAIL primeiro, n√£o o username
    console.log('Preenchendo EMAIL na primeira tela...');
    await page.focus('input[autocomplete="username"], input[type="text"]').catch(() => 
      console.log('N√£o foi poss√≠vel focar no campo de usu√°rio'));
    
    // Usar o EMAIL na primeira tela, n√£o o username
    await page.fill('input[autocomplete="username"], input[type="text"]', process.env.TWITTER_EMAIL, { timeout: 20000 }).catch(async () => {
      console.log('Campo de email n√£o encontrado com seletor padr√£o, tentando alternativa...');
      await page.fill('input[type="text"]', process.env.TWITTER_EMAIL, { timeout: 10000 });
    });

    // Aguarda um pouco antes de prosseguir
    await page.waitForTimeout(1000);

    // Clica no bot√£o Next com m√©todo simplificado e mais seguro
    console.log('Clicando no bot√£o Next na primeira tela...');
    await page.screenshot({ path: './img-twitter-execution/after-email-input.png' }).catch(() => {});
    
    // Verifica todos os bot√µes dispon√≠veis na p√°gina para debug
    try {
      const buttons = await page.$$('div[role="button"]');
      console.log(`Encontrados ${buttons.length} bot√µes na p√°gina`);
      
      // Se encontrou algum bot√£o, tenta clicar no primeiro (geralmente √© o Next/Avan√ßar)
      if (buttons.length > 0) {
        console.log('Clicando no primeiro bot√£o encontrado');
        await buttons[0].click().catch(e => console.log('Erro ao clicar no primeiro bot√£o:', e.message));
      } else {
        // Se n√£o encontrou bot√µes, tenta pressionar Enter
        console.log('Nenhum bot√£o encontrado, tentando pressionar Enter');
        await page.keyboard.press('Enter').catch(e => console.log('Erro ao pressionar Enter:', e.message));
      }
    } catch (e) {
      console.log('Erro ao tentar interagir com bot√µes:', e.message);
      // Continua mesmo com erro
    }
    
    // Aguarda para verificar se avan√ßamos para a pr√≥xima tela
    await page.waitForTimeout(5000);
    await page.screenshot({ path: './img-twitter-execution/after-next-button.png' }).catch(() => {});
    
    // Verifica√ß√µes de seguran√ßa: checamos se a p√°gina ainda est√° ativa de forma correta
    let isPageClosed = false;
    try {
      isPageClosed = page.isClosed();
    } catch (e) {
      console.log('Erro ao verificar se p√°gina est√° fechada:', e.message);
      isPageClosed = true;
    }
    
    if (isPageClosed) {
      console.error('A p√°gina foi fechada durante o processo. Abortando.');
      return;
    }

    // Verifica se estamos na tela de "atividade incomum"
    const isUnusualActivityScreen = await page.evaluate(() => {
      const pageText = document.body.innerText;
      return pageText.includes('unusual login') || pageText.includes('unusual activity') || 
             pageText.includes('Enter your phone number') || pageText.includes('Enter your phone number or username');
    }).catch(() => false); // Em caso de erro, assume que n√£o estamos na tela
    
    if (isUnusualActivityScreen) {
      console.log('Detectada tela de atividade incomum!');
      
      // Verifica se a p√°gina ainda est√° dispon√≠vel
      try {
        isPageClosed = page.isClosed();
      } catch (e) {
        console.log('Erro ao verificar se p√°gina est√° fechada:', e.message);
        isPageClosed = true;
      }
      
      if (isPageClosed) {
        console.error('A p√°gina foi fechada durante o processo. Abortando.');
        return;
      }
      
      // Preenche com o username nessa tela
      await page.fill('input[type="text"]', process.env.TWITTER_USERNAME, { timeout: 10000 }).catch(async (e) => {
        console.log('Erro ao preencher username:', e.message);
        console.log('Tentando outros seletores para o campo de username...');
        await page.fill('input', process.env.TWITTER_USERNAME, { timeout: 10000 }).catch(e => 
          console.log('Erro ao preencher com seletor alternativo:', e.message));
      });
      
      // Verifica novamente se a p√°gina ainda est√° dispon√≠vel
      try {
        isPageClosed = page.isClosed();
      } catch (e) {
        console.log('Erro ao verificar se p√°gina est√° fechada:', e.message);
        isPageClosed = true;
      }
      
      if (isPageClosed) {
        console.error('A p√°gina foi fechada durante o processo. Abortando.');
        return;
      }
      
      // Clica no bot√£o Next nessa tela usando a mesma abordagem robusta
      console.log('Clicando em Next na tela de verifica√ß√£o...');
      try {
        const buttons = await page.$$('div[role="button"]');
        if (buttons.length > 0) {
          console.log('Clicando no primeiro bot√£o encontrado');
          await buttons[0].click().catch(e => console.log('Erro ao clicar no bot√£o:', e.message));
        } else {
          console.log('Nenhum bot√£o encontrado, tentando pressionar Enter');
          await page.keyboard.press('Enter').catch(e => console.log('Erro ao pressionar Enter:', e.message));
        }
      } catch (e) {
        console.log('Erro ao tentar interagir com bot√µes:', e.message);
      }
      
      // Aguarda para a pr√≥xima tela
      await page.waitForTimeout(5000);
      await page.screenshot({ path: './img-twitter-execution/after-unusual-activity.png' }).catch(() => {});
    } else {
      console.log('N√£o detectada tela de atividade incomum, continuando com fluxo padr√£o...');
    }
    
    // Verifica se a p√°gina ainda est√° dispon√≠vel antes de continuar
    if (page.isClosed()) {
      console.error('A p√°gina foi fechada durante o processo. Abortando.');
      return;
    }
    
    // Agora verifica se estamos na tela para inserir o USERNAME
    const usernameScreen = await page.evaluate(() => {
      const pageText = document.body.innerText;
      return pageText.includes('Enter your username') || pageText.includes('Enter your phone or username');
    }).catch(() => false);
    
    if (usernameScreen) {
      console.log('Detectada tela de inser√ß√£o de username!');
      
      // Verifica se a p√°gina ainda est√° dispon√≠vel
      if (page.isClosed()) {
        console.error('A p√°gina foi fechada durante o processo. Abortando.');
        return;
      }
      
      // Preenche com o username nessa tela
      await page.fill('input[type="text"]', process.env.TWITTER_USERNAME, { timeout: 10000 }).catch(async (e) => {
        console.log('Erro ao preencher username:', e.message);
        console.log('Tentando outros seletores para o campo de username...');
        await page.fill('input', process.env.TWITTER_USERNAME, { timeout: 10000 }).catch(e => 
          console.log('Erro ao preencher com seletor alternativo:', e.message));
      });
      
      // Verifica novamente se a p√°gina ainda est√° dispon√≠vel
      if (page.isClosed()) {
        console.error('A p√°gina foi fechada durante o processo. Abortando.');
        return;
      }
      
      // Clica no bot√£o Next nessa tela usando a mesma abordagem robusta
      console.log('Clicando em Next na tela de username...');
      try {
        const buttons = await page.$$('div[role="button"]');
        if (buttons.length > 0) {
          console.log('Clicando no primeiro bot√£o encontrado');
          await buttons[0].click().catch(e => console.log('Erro ao clicar no bot√£o:', e.message));
        } else {
          console.log('Nenhum bot√£o encontrado, tentando pressionar Enter');
          await page.keyboard.press('Enter').catch(e => console.log('Erro ao pressionar Enter:', e.message));
        }
      } catch (e) {
        console.log('Erro ao tentar interagir com bot√µes:', e.message);
      }
      
      // Aguarda para a pr√≥xima tela
      await page.waitForTimeout(5000);
      await page.screenshot({ path: './img-twitter-execution/after-username-screen.png' }).catch(() => {});
    }
    
    // Verifica se a p√°gina ainda est√° dispon√≠vel antes de continuar
    if (page.isClosed()) {
      console.error('A p√°gina foi fechada durante o processo. Abortando.');
      return;
    }
    
    // Agora espera pela tela de senha
    console.log('Esperando pela tela de senha...');
  await page.waitForTimeout(3000);
  
    // Verifica se a p√°gina ainda est√° dispon√≠vel
    if (page.isClosed()) {
      console.error('A p√°gina foi fechada durante o processo. Abortando.');
      return;
    }
    
    // Espera pelo campo de senha
    console.log('Preenchendo senha...');
    
    // Tira screenshot para ver em qual tela estamos
    await page.screenshot({ path: './img-twitter-execution/before-password.png' }).catch(() => {});
    
    // Tenta preencher o campo de senha com tratamento de erro robusto
    await page.fill('input[name="password"]', process.env.TWITTER_PASSWORD, { timeout: 20000 }).catch(async (e) => {
      console.log('Erro ao preencher senha:', e.message);
      console.log('Campo de senha n√£o encontrado com seletor padr√£o, tentando alternativa...');
      await page.fill('input[type="password"]', process.env.TWITTER_PASSWORD, { timeout: 10000 }).catch(e => 
        console.log('Erro ao preencher senha com seletor alternativo:', e.message));
    });

    // Verifica se a p√°gina ainda est√° dispon√≠vel
    if (page.isClosed()) {
      console.error('A p√°gina foi fechada durante o processo. Abortando.');
      return;
    }
    
    // Tenta clicar no bot√£o de login com a mesma abordagem robusta
    console.log('Clicando no bot√£o de login...');
    
    // Captura screenshot antes de prosseguir
    await page.screenshot({ path: './img-twitter-execution/before-login-button-click.png' }).catch(e => console.log('Erro ao capturar screenshot:', e.message));
    
    // Usa nossa abordagem robusta para clicar no bot√£o
    try {
      const buttons = await page.$$('div[role="button"]');
      if (buttons.length > 0) {
        console.log('Clicando no primeiro bot√£o encontrado');
        await buttons[0].click().catch(e => console.log('Erro ao clicar no bot√£o:', e.message));
      } else {
        console.log('Nenhum bot√£o encontrado, tentando pressionar Enter');
        await page.keyboard.press('Enter').catch(e => console.log('Erro ao pressionar Enter:', e.message));
      }
    } catch (e) {
      console.log('Erro ao tentar interagir com bot√µes:', e.message);
    }
    
    // Espere um pouco antes de continuar
    await page.waitForTimeout(5000);

    // Verifica se a p√°gina ainda est√° dispon√≠vel
    if (page.isClosed()) {
      console.error('A p√°gina foi fechada durante o processo. Abortando.');
      return;
    }

    // Aguarda redirecionamento para a p√°gina inicial
    console.log('Aguardando redirecionamento para a p√°gina inicial...');
    await page.waitForURL('**/home', { timeout: 60000 }).catch(() => {
      console.log('Timeout ao aguardar redirecionamento, verificando URL manualmente...');
    });

    // Verifica se estamos na home page
    const currentUrl = await page.url();
    if (!currentUrl.includes('/home')) {
      console.log('N√£o redirecionou automaticamente para a home. URL atual:', currentUrl);
      await page.goto('https://twitter.com/home', { timeout: 30000 });
    }

    // Comp√µe um novo tweet
    console.log('Compondo novo tweet...');
    
    // Tenta clicar no bot√£o de compor tweet com diversos seletores
    // Captura screenshot antes de prosseguir
    await page.screenshot({ path: './img-twitter-execution/home-page.png' }).catch(e => console.log('Erro ao capturar screenshot:', e.message));
    
    try {
      await page.click('a[data-testid="SideNav_NewTweet_Button"]', { timeout: 5000 }).catch(async () => {
        console.log('Tentando seletor alternativo 1...');
        await page.click('a[aria-label="Tweet"]', { timeout: 5000 }).catch(async () => {
          console.log('Tentando seletor alternativo 2...');
          await page.click('a:has-text("Tweet")', { timeout: 5000 }).catch(async () => {
            console.log('Tentando seletor alternativo 3...');
            await page.click('div[aria-label="Tweet"]', { timeout: 5000 }).catch(e => {
              console.log('Nenhum bot√£o de tweet encontrado:', e.message);
              throw new Error('N√£o foi poss√≠vel encontrar o bot√£o de compor tweet');
            });
          });
        });
      });
    } catch (tweetButtonError) {
      console.error('Erro ao tentar clicar no bot√£o de compor tweet:', tweetButtonError.message);
      throw tweetButtonError; // Esse erro √© cr√≠tico, n√£o podemos continuar sem compor o tweet
    }

    // Digita o texto do tweet
    await page.fill('div[data-testid="tweetTextarea_0"]', tweetText, { timeout: 20000 });

    // Clica no bot√£o de enviar tweet
    console.log('Enviando tweet...');
    try {
      // Tenta v√°rias estrat√©gias para clicar no bot√£o Post
      await page.click('div[data-testid="tweetButton"]', { timeout: 5000 }).catch(async () => {
        console.log('Tentando seletor alternativo 1 para bot√£o Post...');
        await page.click('button[data-testid="tweetButton"]', { timeout: 5000 }).catch(async () => {
          console.log('Tentando seletor alternativo 2 para bot√£o Post...');
          await page.click('div[role="button"]:has-text("Post")', { timeout: 5000 }).catch(async () => {
            console.log('Tentando seletor alternativo 3 para bot√£o Post...');
            await page.click('button:has-text("Post")', { timeout: 5000 }).catch(async () => {
              console.log('Tentando estrat√©gia por √≠ndice...');
              const postButtons = await page.$$('div[role="button"], button');
              console.log(`Encontrados ${postButtons.length} bot√µes potenciais na tela`);
              
              // Se encontrou bot√µes, tenta clicar nos poss√≠veis candidatos
              if (postButtons.length > 0) {
                // Tenta um dos √∫ltimos bot√µes da p√°gina, geralmente √© o Post
                const buttonToClick = postButtons[postButtons.length - 1];
                console.log('Clicando no √∫ltimo bot√£o encontrado');
                await buttonToClick.click().catch(e => console.log('Erro ao clicar no bot√£o por √≠ndice:', e.message));
              } else {
                throw new Error('N√£o foi poss√≠vel encontrar o bot√£o de enviar tweet');
              }
            });
          });
        });
      });
    } catch (tweetSubmitError) {
      console.error('Erro ao tentar clicar no bot√£o de Post:', tweetSubmitError.message);
      await page.screenshot({ path: './img-twitter-execution/post-button-error.png' });
      throw tweetSubmitError;
    }

    // Espera um pouco para o tweet ser enviado
    await page.waitForTimeout(5000);

    // Verifica se o tweet foi enviado
    const tweetPosted = await page.url().includes('/status/');
    if (tweetPosted) {
      console.log('Tweet enviado com sucesso!');
    } else {
      console.log('N√£o pudemos confirmar se o tweet foi enviado.');
    }

    // Captura screenshot final
    await page.screenshot({ path: './img-twitter-execution/tweet-posted.png' }).catch(e => console.error('Erro ao capturar screenshot final:', e.message));
    
  } catch (error) {
    console.error('Erro no teste:', error.message);
    
    try {
      await page.screenshot({ path: './img-twitter-execution/error-screenshot.png' }).catch(() => {
        console.log('N√£o foi poss√≠vel capturar screenshot de erro');
      });
    } catch (e) {
      // Ignora erros do screenshot
    }
    
    throw error;
  }
}); 